#ifndef NTT_H
#define NTT_H

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cstdint>
#include <Eigen/Dense>
#include <openssl/evp.h>
#include <openssl/sha.h>
#include "../include/polynomial.h"
#include "../include/int.h"
// Forward declaration della classe Polynomial (evita dipendenze circolari)

const int N = 256;      // Dimensione del polinomio
const uint32_t q = 1073734913; //modulo degli interi usati come coefficenti
const int32_t zetas[128] = {
        1, 687307966, 1023262583, 899073793, 1027402420, 14410985, 134697730, 629400454,
    285848177, 382118684, 321487126, 820617715, 859662062, 935612322, 593079429, 116541275,
    538779686, 380201329, 131765096, 614666001, 339555595, 240966369, 73284030, 61591189,
    547552255, 537051218, 979118397, 51109199, 182942837, 52580214, 1005830813, 519696919,
    91578794, 114753024, 688218859, 325615814, 128809006, 160264834, 295355114, 502380673,
    981191363, 396723830, 1064147897, 596769077, 911114425, 548878943, 176756657, 201219863,
    1023295314, 282211763, 81770930, 805293004, 813301416, 945723682, 50258837, 274551549,
    965871544, 9262182, 375092390, 947467706, 968635586, 723733897, 964910794, 820133900,
    3141292, 1064119062, 444538133, 855552265, 877856194, 447960540, 331971076, 239014714,
    295930174, 926098420, 744343250, 706225466, 883194539, 3396772, 365605794, 256239950,
    398127192, 533302777, 717801488, 510576129, 380229105, 194265703, 993024299, 689037631,
    192404195, 652881577, 309019032, 852548609, 1060068848, 385134437, 497984467, 327535192,
    675070888, 618744474, 941469673, 514914019, 435460832, 847206870, 571937509, 353197940,
    972018672, 335289475, 500175152, 732700088, 610483471, 541607738, 916779762, 856093417,
    183614937, 723462693, 1059944222, 71513383, 296785010, 585212439, 1069664449, 153906535,
    672218271, 223281583, 979838200, 878325321, 40999104, 841288243, 944769714, 236938381,
};

const int32_t arr[128] = {
    3141292, -3141292, 1064119062, -1064119062, 444538133, -444538133, 855552265, -855552265,
    877856194, -877856194, 447960540, -447960540, 331971076, -331971076, 239014714, -239014714,
    295930174, -295930174, 926098420, -926098420, 744343250, -744343250, 706225466, -706225466,
    883194539, -883194539, 3396772, -3396772, 365605794, -365605794, 256239950, -256239950,
    398127192, -398127192, 533302777, -533302777, 717801488, -717801488, 510576129, -510576129,
    380229105, -380229105, 194265703, -194265703, 993024299, -993024299, 689037631, -689037631,
    192404195, -192404195, 652881577, -652881577, 309019032, -309019032, 852548609, -852548609,
    1060068848, -1060068848, 385134437, -385134437, 497984467, -497984467, 327535192, -327535192,
    675070888, -675070888, 618744474, -618744474, 941469673, -941469673, 514914019, -514914019,
    435460832, -435460832, 847206870, -847206870, 571937509, -571937509, 353197940, -353197940,
    972018672, -972018672, 335289475, -335289475, 500175152, -500175152, 732700088, -732700088,
    610483471, -610483471, 541607738, -541607738, 916779762, -916779762, 856093417, -856093417,
    183614937, -183614937, 723462693, -723462693, 1059944222, -1059944222, 71513383, -71513383,
    296785010, -296785010, 585212439, -585212439, 1069664449, -1069664449, 153906535, -153906535,
    672218271, -672218271, 223281583, -223281583, 979838200, -979838200, 878325321, -878325321,
    40999104, -40999104, 841288243, -841288243, 944769714, -944769714, 236938381, -236938381,
};
using namespace std;
using namespace Eigen;
std::vector<uint32_t> Decompress(const std::vector<uint32_t>& y, int d, uint32_t q);
std::vector<uint32_t> Compress(const std::vector<uint32_t>& x, int d, uint32_t q);
uint32_t bitrev7(uint32_t x);
uint32_t getZeta2(uint32_t i);
std::pair<uint32_t, uint32_t> baseCaseMultiply(uint32_t f0, uint32_t f1,
    uint32_t g0, uint32_t g1,
    uint32_t zeta);
Polynomial subNTTs(const Polynomial& f, const Polynomial& g) ;
Polynomial addNTTs(const Polynomial& f, const Polynomial& g) ;
Polynomial multiplyNTTs(const Polynomial& f, const Polynomial& g) ;
Polynomial ntt(Polynomial f);
Polynomial inv_ntt(Polynomial f_hat);

std::vector<uint8_t> sha3_512(const std::vector<uint8_t>& input);
std::vector<uint8_t> PRF(uint8_t eta, const std::vector<uint8_t>& s, uint8_t b);

Polynomial SampleNTT(const vector<uint8_t>& seed, uint8_t idx1, uint8_t idx2);
Polynomial SamplePolyCBD(const vector<uint8_t>& B, int eta);
Polynomial SamplePolyCBD_custom(const vector<uint8_t>& B, int eta);
#endif